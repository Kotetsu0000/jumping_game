{
    "github.copilot.chat.codeGeneration.instructions": [
        {
            "text": "GitHub MCP Serverでは owner:kotetsu0000, repo:jumping_gameを利用します。"
        },
        {
            "text": "ブランチ戦略: `main` ブランチは常に最新の状態を保ち、安定版として扱います。直接コミットは禁止。フィーチャーブランチは新機能実装の場合は`feature/[issue番号]-[短い説明]` (例: `feature/001-player-jump`)、バグ修正の場合は`fix/[issue番号]-[短い説明]` (例: `fix/002-score-display-error`)、リファクタリング等の場合は`refactor/[issue番号]-[短い説明]` (例: `refactor/003-code-cleanup`)と命名します。"
        },
        {
            "text": "開発プロセス:issue をアサイン（または自身で選択） → `main` ブランチを最新の状態にし、フィーチャーブランチを作成・チェックアウト → issue の課題解決に取り組みます。 → Playwrightを使用して、コードの変更が正しく動作するかを確認します。スクリーンショットを撮影し、想定通りのUIになっているかを確認します。 → 作業完了後、プルリクエストを `main` ブランチに対して作成します。プルリクエストには、変更内容の概要、関連する issue 番号を明記します。 → チームメンバーによるコードレビューを受け、フィードバックがあれば修正します。 → プルリクエストが承認され `main` ブランチにマージされた後、作業したフィーチャーブランチは削除します。"
        },
        {
            "text": "コミットは意味のある単位で行い、コミットメッセージは分かりやすく記述します。"
        }
    ],
    "mcp": {
        "inputs": [
            {
                "type": "promptString",
                "id": "github_token",
                "description": "GitHub Personal Access Token",
                "password": true
            }
        ],
        "servers": {
            "github": {
                "command": "docker",
                "args": [
                    "run",
                    "-i",
                    "--rm",
                    "-e",
                    "GITHUB_PERSONAL_ACCESS_TOKEN",
                    "ghcr.io/github/github-mcp-server"
                ],
                "env": {
                    "GITHUB_PERSONAL_ACCESS_TOKEN": "${input:github_token}"
                }
            },
            "playwright": {
                "command": "docker",
                "args": [
                    "run",
                    "-i",
                    "--rm",
                    "--init",
                    "--pull=always",
                    "mcr.microsoft.com/playwright/mcp"
                ]
            }
        }
    }
}
